x-backend:
  &backend
  build:
    context: ./fast_offer_backend
    dockerfile: Dockerfile
  user: "${UID:-1000}:${GID:-1000}"
  depends_on:
    postgres:
      condition: "service_started"
      required: true
    redis:
      condition: "service_started"
      required: true
  env_file:
    - ".env"
  environment:
    - RAILS_ENV=development
  stdin_open: true
  tty: true
  volumes:
    - ./fast_offer_backend:/app
    - gem_cache:/usr/local/bundle/gems

services:
  api:
    <<: *backend
    ports:
      - "3001:3001"

  sidekiq:
    <<: *backend
    command: bundle exec sidekiq
    entrypoint: []

  frontend:
    build:
      context: ./fast_offer_front
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    env_file:
      - ".env"
    environment:
      - VITE_NODE_ENV=development
    depends_on:
      - api
    volumes:
      # чтобы не пересиобрать образ после добавления\удаления пакетов, так как при перезапуске контейнера,
      # все теряется, и возвразается изначальное состояние образа, где node_modules не содержит этих пакетов
      # и еще чтобы при монтировании папки с хоста, node_modules  не перетирались хостом, если на хосте нет, то тупо удалится в контейнере
      - node_modules:/app/node_modules
      - ./fast_offer_front:/app

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
      - "5445:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U postgres
      interval: 2s
      timeout: 5s
      retries: 30

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "7963:6379"
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 30

volumes:
  gem_cache:
  pg_data:
  redis_data:
  node_modules: